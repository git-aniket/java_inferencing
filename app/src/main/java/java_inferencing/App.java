/*
 * This source file was generated by the Gradle 'init' task
 */
package java_inferencing;

import java.nio.FloatBuffer;
import java.util.HashMap;
import java.util.Map;

import ai.onnxruntime.OnnxTensor;
import ai.onnxruntime.OnnxValue;
import ai.onnxruntime.OrtEnvironment;
import ai.onnxruntime.OrtSession;

public class App{
   
    public static void main(String[] args) throws Exception {
        // Load the ONNX model
        String modelPath = "/mnt/SharedDisk/learning/machine_learning_projects/self_learning/iris_xgb_model_with_probs.onnx";
        OrtEnvironment env = OrtEnvironment.getEnvironment();
        OrtSession.SessionOptions options = new OrtSession.SessionOptions();
        OrtSession session = env.createSession(modelPath, options);

        // Example input data (batch of inputs)
        float[][] inputData = new float[][]{
            {5.1f, 3.5f, 1.4f, 0.2f}, // First sample
            {6.7f, 3.1f, 4.4f, 1.4f}, // Second sample
            {7.2f, 3.6f, 6.1f, 2.5f}  // Third sample
        };

        // Prepare input tensor
        long[] inputShape = new long[]{inputData.length, inputData[0].length};
        FloatBuffer inputBuffer = FloatBuffer.allocate(inputData.length * inputData[0].length);
        for (float[] row : inputData) {
            inputBuffer.put(row);
        }
        inputBuffer.rewind();

        OnnxTensor inputTensor = OnnxTensor.createTensor(env, inputBuffer, inputShape);

        // Prepare input map
        Map<String, OnnxTensor> inputs = new HashMap<>();
        inputs.put("float_input", inputTensor);

        // Run inference
        OrtSession.Result result = session.run(inputs);

        // Extract probabilities
        OnnxValue rawOutput = result.get(1); // Get probabilities (assumes second output)
        if (rawOutput instanceof OnnxTensor) {
            OnnxTensor outputTensor = (OnnxTensor) rawOutput;
            float[][] probabilities = (float[][]) outputTensor.getValue(); // Retrieve 2D probabilities array
            System.out.println("Predicted Probabilities:");
            for (int i = 0; i < probabilities.length; i++) {
                System.out.print("Input " + (i + 1) + ": ");
                for (int j = 0; j < probabilities[i].length; j++) {
                    System.out.printf("Class %d: %.2f ", j, probabilities[i][j]);
                }
                System.out.println();
            }
        }

        // Close resources
        inputTensor.close();
        session.close();
        env.close();
    }
}
